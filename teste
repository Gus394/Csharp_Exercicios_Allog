#include <iostream>
#include <fstream>
#include <string>
#include <vector>

using namespace std;

/*void hazard(vector<string>& instrucoes) {
    int n = instrucoes.size();

    for (int i = 0; i < n - 1; i++) {
        string atual = instrucoes[i];
        string prox = instrucoes[i + 1];

        if (atual.substr(11, 5) == prox.substr(6, 5)) { // detecta hazard de dados
            instrucoes.insert(instrucoes.begin() + i + 1, "00000000000000000000000000010011"); // corrige com NOP
        }
    }
}*/

void inserirs_nops_forwarding(vector<string>& instrucoes) {
    int n = instrucoes.size();
    for (int i = 0; i < n - 1; i++) {
        string atual = instrucoes[i];
        string prox = instrucoes[i + 1];

        if (atual.substr(24, 5) == "0000011") {
            if ((atual.substr(12, 5) || atual.substr(7, 5) == (atual.substr(12, 5) || atual.substr(7, 5))
        }
    }
}

void hazard(vector<string>& instrucoes) {
    int n = instrucoes.size();
    for (int i = 0; i < n - 1; i++) {
        string atual = instrucoes[i];
        string prox = instrucoes[i + 1];
        string prox_prox = instrucoes[i + 2];

           // rd (a partir do bit 20, tamanho 5) // rs1 = 12, 5     rs2 = 7, 5
        if (atual.substr(20, 5) == prox.substr(12, 5) || prox.substr(7, 5) == atual.substr(20, 5) || 
            atual.substr(20, 5) == prox_prox.substr(12, 5) || prox_prox.substr(7, 5) == atual.substr(20, 5)) { // detecta hazard de dados
            
            instrucoes.insert(instrucoes.begin() + i + 1, "00000000000000000000000000010011"); // corrige com NOP
            instrucoes.insert(instrucoes.begin() + i + 2, "00000000000000000000000000010011");
            n+=2; // atualiza o tamanho do vetor
            i+=2; // avança uma posição para evitar um loop infinito
        }
    }
}


int main() {
    string filename = "bina.bin";

    ifstream file(filename, ios::in | ios::binary);
    if (!file.is_open()) {
        cerr << "Erro ao abrir arquivo binario" << endl;
        return 1;
    }

    // lê o arquivo binário de instruções
    vector<string> instrucoes;
    string linha;
    while (getline(file, linha)) {
        instrucoes.push_back(linha);
    }

    // corrige os hazards com NOPs
    hazard(instrucoes);
    //inserirs_nops_forwarding(instrucoes);

    // escreve as instruções corrigidas no arquivo de saída
    ofstream outfile("out.bin", ios::out | ios::binary);
    if (!outfile.is_open()) {
        cerr << "Erro ao criar arquivo de saida" << endl;
        return 1;
    }
    for (auto instr : instrucoes) {
        outfile << instr << endl;
    }

    cout << "Arquivo corrigido." << endl;

    return 0;
}
